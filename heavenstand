local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create main window using Fluent UI
local Window = Fluent:CreateWindow({
    Title = "Heaven stand!",
    SubTitle = "by คนหล่อ",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Add Tabs to the window
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "keyboard" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Function to show a notification
local function showNotification(title, content)
    Fluent:Notify({
        Title = title,
        Content = content,
        Duration = 5
    })
end

-- Function to teleport player to a given NPC or BasePart
local function teleportPlayerToNode(selectedNode)
    local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end  -- If HumanoidRootPart is missing, return

    -- If we find the selected node, teleport
    if selectedNode then
        local obj = selectedNode.Obj
        if obj:IsA("Model") then
            -- Check if the model has a PrimaryPart
            if obj.PrimaryPart then
                hrp.CFrame = obj.PrimaryPart.CFrame
            else
                -- If no PrimaryPart, check for a BasePart
                local basePart = obj:FindFirstChildWhichIsA("BasePart", true)
                if basePart then
                    hrp.CFrame = basePart.CFrame
                end
            end
        elseif obj:IsA("BasePart") then
            -- If it's just a BasePart, teleport to it directly
            hrp.CFrame = obj.CFrame
        end
    end
end

-- Dropdown for NPC selection
local npcList = {}  -- List for dropdown
local npcPaths = {}  -- Store paths to NPC models

-- Rename NPCs to avoid conflicts and populate NPC dropdown
for _, npc in pairs(workspace.Map.NPCs:GetChildren()) do
    if npc:IsA("Model") then
        local renamedNpc = npc.Name
        local count = 1
        -- Check if the name already exists, if so, rename it
        while table.find(npcList, renamedNpc) do
            renamedNpc = npc.Name .. count
            count = count + 1
        end
        npc.Name = renamedNpc  -- Rename NPC to avoid duplicates
        table.insert(npcList, renamedNpc)
        table.insert(npcPaths, npc)  -- Store the model itself
    end
end

-- Add Dropdown to the "Main" Tab
local Dropdown = Tabs.Main:AddDropdown("NpcDropdown", {
    Title = "Select NPC",
    Values = npcList,
    Multi = false,
    Default = 1
})

Dropdown:SetValue(npcList[1])

-- Teleport Button
Tabs.Main:AddButton({
    Title = "Teleport to NPC",
    Description = "Teleport to the selected NPC",
    Callback = function()
        local selectedNpcName = Dropdown.Value
        for i, npcName in ipairs(npcList) do
            if npcName == selectedNpcName then
                local selectedNpc = npcPaths[i]  -- Get the actual model reference
                if selectedNpc then
                    -- Teleport to the selected NPC
                    teleportPlayerToNode({ Obj = selectedNpc })
                    showNotification("Teleported", "Teleported to " .. selectedNpc.Name)
                end
                break
            end
        end
    end
})

-- Auto Farm Variables
local spawnWaitingSpot = CFrame.new(-5, 806, 428)  -- Spawn waiting spot position
local isAutoFarming = false
local running = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local baseParts = {}

-- Update base parts list
local function updateBaseParts()
    baseParts = {}
    local spawnPointsBox = workspace.Map.spawnPoints.Box
    for _, child in ipairs(spawnPointsBox:GetChildren()) do
        if child:FindFirstChild("Box") and child.Box:FindFirstChild("Base") then
            table.insert(baseParts, child.Box.Base)
        end
    end
end

-- Wait for base parts to spawn
local function waitForBaseParts()
    -- Teleport to the spawn waiting spot when the "waiting" message is printed
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = spawnWaitingSpot
    showNotification("Teleported", "Teleported to spawn waiting spot.")

    while #baseParts == 0 and isAutoFarming do
        task.wait(1)
        updateBaseParts()
    end
    if #baseParts > 0 then
        print("Base parts respawned.")
        showNotification("Box Spawned", "Box parts have respawned.")
    else
        print("No box parts found. Teleporting to spawn waiting spot.")
        -- Teleport to the spawn waiting spot if no box parts found
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = spawnWaitingSpot
        showNotification("Teleported", "Teleported to spawn waiting spot.")
    end
end

-- Start auto farm loop
local function startAutoFarm()
    while isAutoFarming do
        updateBaseParts()

        if #baseParts == 0 then
            waitForBaseParts()
        end

        for _, base in ipairs(baseParts) do
            if not isAutoFarming then break end
            humanoidRootPart.CFrame = base.CFrame
            print("Teleported to:", base.Name)

            task.wait(0.2)
            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.1)
            game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.E, false, game)

            task.wait(1)
        end

        task.wait(0.1)
    end
    print("Auto farm loop ended.")
    running = false
end

-- Add Toggle for Auto Farm
local Toggle = Tabs.Main:AddToggle("Auto Farm Box Heaven Stand", {
    Title = "Auto Farm",
    Default = false,
    Callback = function(state)
        isAutoFarming = state
        if isAutoFarming and not running then
            print("Auto Farm activated.")
            running = true
            coroutine.wrap(startAutoFarm)()
        elseif not isAutoFarming then
            print("Auto Farm deactivated.")
        end
    end
})

-- Add Interface Manager to Settings Tab
-- Hand the library over to InterfaceManager
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("FluentScriptHub")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)

-- Initialize the window and tabs
Window:SelectTab(1)

-- Final notification
Fluent:Notify({
    Title = "Cool",
    Content = "The script has been loaded.",
    Duration = 8
})
